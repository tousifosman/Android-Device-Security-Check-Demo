package utils;

import android.content.Context;
import android.util.Log;

import com.google.android.gms.safetynet.HarmfulAppsData;
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi.*;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.List;
import java.util.Random;

/**
 * Created by osman.tousif on 2/7/2018.
 */

public class Malware {

    private static final String TAG = "Malware";

    public enum STATUS {
        VERIFICATION_ENABLED,
        VERIFICATION_DISABLED,
        VERIFICATION_ERROR,
        MALWARE_FOUND,
        NO_MALWARE_FOUND,
        UNSUCCESSFUL
    }

    private static STATUS isMalewareFoundResult;
    private static STATUS isVerificationEnabled;

    private static final Random mRandom = new SecureRandom();

    public static void isMalewareFound(Context context, final ResultListener resultListener) {


        String nonceData = "Safety Net Sample: " + System.currentTimeMillis();
        byte[] nonce = getRequestNonce(nonceData);

        isVerificationEnabled(context, new ResultListener() {
            @Override
            public void onSuccess() {

            }

            @Override
            public void onFailure() {

            }

            @Override
            public void onError() {

            }
        });

        SafetyNet.getClient(context)
                .listHarmfulApps()
                .addOnCompleteListener(new OnCompleteListener<HarmfulAppsResponse>() {
                    @Override
                    public void onComplete(Task<HarmfulAppsResponse> task) {
                        Log.d(TAG, "Received listHarmfulApps() result");

                        if (task.isSuccessful()) {
                            HarmfulAppsResponse result = task.getResult();
                            long scanTimeMs = result.getLastScanTimeMs();

                            List<HarmfulAppsData> appList = result.getHarmfulAppsList();
                            if (appList.isEmpty()) {
                                Log.d(TAG, "There are no known " +
                                        "potentially harmful apps installed.");

                                resultListener.onSuccess();

                            } else {
                                Log.e(TAG,
                                        "Potentially harmful apps are installed!");

                                for (HarmfulAppsData harmfulApp : appList) {
                                    Log.e(TAG, "Information about a harmful app:");
                                    Log.e(TAG, "  APK: " + harmfulApp.apkPackageName);
                                    Log.e(TAG, "  SHA-256: " + harmfulApp.apkSha256);

                                    // Categories are defined in VerifyAppsConstants.
                                    Log.e(TAG,"  Category: " + harmfulApp.apkCategory);
                                }
                                //isMalewareFoundResult = STATUS.MALWARE_FOUND;
                                resultListener.onFailure();
                            }
                        } else {
                            Log.e(TAG, "An error occurred. " +
                                    "Call isVerifyAppsEnabled() to ensure " +
                                    "that the user has consented.");
                            resultListener.onFailure();
                        }
                    }
                });
    }

    private static STATUS  isVerificationEnabled(Context context, final ResultListener resultListener){

        SafetyNet.getClient(context)
                .isVerifyAppsEnabled()
                .addOnCompleteListener(new OnCompleteListener<VerifyAppsUserResponse>() {
                    @Override
                    public void onComplete(Task<VerifyAppsUserResponse> task) {
                        if (task.isSuccessful()) {
                            VerifyAppsUserResponse result = task.getResult();
                            if (result.isVerifyAppsEnabled()) {
                                Log.d(TAG, "The Verify Apps feature is enabled.");
                                resultListener.onSuccess();
                            } else {
                                Log.d("MY_APP_TAG", "The Verify Apps feature is disabled.");
                                resultListener.onFailure();
                            }
                        } else {
                            Log.e(TAG, "A general error occurred.");
                            resultListener.onError();
                        }
                    }
                });

        return isVerificationEnabled;

    }

    private static byte[] getRequestNonce(String data) {
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        byte[] bytes = new byte[24];
        mRandom.nextBytes(bytes);
        try {
            byteStream.write(bytes);
            byteStream.write(data.getBytes());
        } catch (IOException e) {
            return null;
        }

        return byteStream.toByteArray();
    }

}
